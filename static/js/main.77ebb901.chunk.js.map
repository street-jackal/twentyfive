{"version":3,"sources":["reportWebVitals.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","App","class","SetBreak","Timer","SetSession","useState","length","setLength","id","onClick","formatTime","secs","minutes","Math","floor","seconds","timeLeft","setInterval","clearInterval","document","getElementById","innerHTML","value","ReactDOM","render","StrictMode"],"mappings":"uLAYeA,G,YAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,QCAd,SAASQ,IAEL,OACE,gCACE,oBAAIC,MAAM,QAAV,4BACA,sBAAKA,MAAM,mBAAX,UACE,cAACC,EAAD,IACA,cAACC,EAAD,IACA,cAACC,EAAD,UAMV,SAASF,IAAY,IAAD,EACUG,mBAAS,GADnB,mBACXC,EADW,KACHC,EADG,KAElB,OACE,gCACE,mBAAGN,MAAM,QAAQO,GAAG,cAApB,0BACA,sBAAKP,MAAM,gBAAX,UACE,wBAAQO,GAAG,kBAAkBC,QAAS,kBAAMF,EAAUD,EAAS,IAA/D,eACA,oBAAGE,GAAG,eAAN,UAAsBF,EAAtB,cACA,wBAAQE,GAAG,kBAAkBC,QAAS,kBAAMF,EAAUD,EAAS,IAA/D,qBAMR,SAASF,IAAc,IAAD,EACQC,mBAAS,IADjB,mBACbC,EADa,KACLC,EADK,KAEpB,OACE,gCACE,mBAAGN,MAAM,QAAQO,GAAG,gBAApB,4BACA,sBAAKP,MAAM,gBAAX,UACE,wBAAQO,GAAG,oBAAoBC,QAAS,kBAAMF,EAAUD,EAAS,IAAjE,eACA,oBAAGE,GAAG,iBAAN,UAAwBF,EAAxB,cACA,wBAAQE,GAAG,oBAAoBC,QAAS,kBAAMF,EAAUD,EAAS,IAAjE,qBAOR,SAASI,EAAWC,GAClB,IAAIC,EAAUC,KAAKC,MAAMH,EAAK,IAC1BI,EAAUJ,EAAiB,GAAVC,EAGrB,OADAA,EAAUA,EAAU,GAAK,IAAMA,EAAUA,GACxB,KAFjBG,EAAUA,EAAU,GAAK,IAAMA,EAAUA,GAK3C,SAASZ,IAGP,IAAIY,EAAU,KACVC,EAAWC,aAAY,WACtBF,GAAU,GACXG,cAAcF,GACdG,SAASC,eAAe,aAAaC,UAAY,YAGjDF,SAASC,eAAe,aAAaC,UAAYX,EAAWK,GAE9DI,SAASC,eAAe,aAAaE,MAASZ,EAAW,KAAQK,GACjEA,GAAW,IACV,KAUH,OACE,gCACE,mBAAGd,MAAM,QAAQO,GAAG,gBAApB,2BACA,sBAAKP,MAAM,kBAAX,UACE,mBAAGO,GAAG,YAAYP,MAAM,eAAxB,mBACA,wBAAQO,GAAG,aAAaP,MAAM,gBAA9B,SACE,mBAAGA,MAAM,wBAEX,wBAAQA,MAAM,gBAAd,SACE,mBAAGA,MAAM,2BASnBsB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACzB,EAAD,MAEFmB,SAASC,eAAe,SAM1B7B,M","file":"static/js/main.77ebb901.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {Provider, connect} from 'react-redux';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\nfunction App() {\n  \n    return (\n      <div>\n        <h1 class=\"input\"> 25 + 5 Clock </h1>\n        <div class=\"buttonBackground\">\n          <SetBreak />\n          <Timer />\n          <SetSession />\n        </div>\n      </div>\n    )\n}\n\nfunction SetBreak() {\n  const [length, setLength] = useState(5);\n  return (\n    <div>\n      <p class=\"title\" id=\"break-label\">Break Length</p>\n      <div class=\"setBackground\">\n        <button id=\"break-increment\" onClick={() => setLength(length + 1)}>+</button>\n        <p id=\"break-length\">{length} minutes</p>\n        <button id=\"break-decrement\" onClick={() => setLength(length - 1)}>-</button>\n      </div>\n    </div>\n  )\n}\n\nfunction SetSession() {\n  const [length, setLength] = useState(25);\n  return (\n    <div>\n      <p class=\"title\" id=\"session-label\">Session Length</p>\n      <div class=\"setBackground\">\n        <button id=\"session-increment\" onClick={() => setLength(length + 1)}>+</button>\n        <p id=\"session-length\">{length} minutes</p>\n        <button id=\"session-decrement\" onClick={() => setLength(length - 1)}>-</button>\n      </div>\n    </div>\n  )\n}\n\n// convert raw seconds into MM:SS format\nfunction formatTime(secs){\n  let minutes = Math.floor(secs/60);\n  let seconds = secs - minutes * 60;\n  seconds = seconds < 10 ? '0' + seconds : seconds;\n  minutes = minutes < 10 ? '0' + minutes : minutes;\n  return minutes + ':' + seconds;\n}\n\nfunction Timer() {\n  \n  //const [timeLeft, setTimeLeft] = useState(minutes);\n  let seconds = 25*60;\n  let timeLeft = setInterval(function(){\n    if(seconds <=0){\n      clearInterval(timeLeft);\n      document.getElementById(\"time-left\").innerHTML = \"Finished\";\n    }\n    else{\n      document.getElementById(\"time-left\").innerHTML = formatTime(seconds);\n    }\n    document.getElementById(\"time-left\").value =  formatTime(25*60 - seconds);\n    seconds -= 1;\n  }, 1000);\n\n  \n  /*\n  useEffect(() => {\n    \n  });\n*/\n \n\n  return (\n    <div>\n      <p class=\"title\" id=\"session-label\">Session Timer</p>\n      <div class=\"timerBackground\">\n        <p id=\"time-left\" class=\"timerDisplay\">25:00</p>\n        <button id=\"start_stop\" class=\"sessionButton\">\n          <i class=\"fa fa-play-circle\"></i>\n        </button>\n        <button class=\"sessionButton\">\n          <i class=\"fa fa-redo-alt\"></i>\n        </button>\n      </div>\n    </div>\n  )\n}\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}