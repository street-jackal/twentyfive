{"version":3,"sources":["index.js"],"names":["SetTime","props","className","id","name","title","b1","onClick","onClickPlus","valueName","length","b2","onClickMinus","formatTime","secs","minutes","Math","floor","seconds","Timer","myTimer","useState","defSession","timeLeft","setTimeLeft","tick","setTick","timerLabel","setTimerLabel","flag","setFlag","workOrBreak","useRef","isRunning","breakLength","sessionLength","setBreak","value","current","setSession","useEffect","setTimeout","document","getElementById","play","clearTimeout","src","pause","currentTime","ReactDOM","render","StrictMode"],"mappings":"4LAMA,SAASA,EAAQC,GACf,OACE,gCACE,mBAAGC,UAAU,QAAQC,GAAIF,EAAMG,KAA/B,SACGH,EAAMI,QAET,sBAAKH,UAAU,gBAAf,UACE,wBAAQC,GAAIF,EAAMK,GAAIC,QAASN,EAAMO,YAArC,eAGA,mBAAGL,GAAIF,EAAMQ,UAAb,SAAyBR,EAAMS,SAC/B,wBAAQP,GAAIF,EAAMU,GAAIJ,QAASN,EAAMW,aAArC,qBASR,SAASC,EAAWC,GACdA,EAAO,IAAGA,EAAO,GACrB,IAAIC,EAAUC,KAAKC,MAAMH,EAAO,IAC5BI,EAAUJ,EAAiB,GAAVC,EAGrB,OADAA,EAAUA,EAAU,GAAK,IAAMA,EAAUA,GACxB,KAFjBG,EAAUA,EAAU,GAAK,IAAMA,EAAUA,GAK3C,SAASC,EAAMlB,GACb,IAUImB,EAXgB,EAGYC,mBAASC,MAHrB,mBAGbC,EAHa,KAGHC,EAHG,OAIIH,oBAAS,GAJb,mBAIbI,EAJa,KAIPC,EAJO,OAKgBL,mBAAS,iBALzB,mBAKbM,EALa,KAKDC,EALC,OAMIP,oBAAS,GANb,mBAMbQ,EANa,KAMPC,EANO,KAOhBC,EAAcC,kBAAO,GACrBC,EAAYD,kBAAO,GACnBE,EAAcF,iBARD,GASbG,EAAgBH,iBARL,IAgEf,SAASI,EAASC,GACXJ,EAAUK,UACbJ,EAAYI,QAAUD,EAAQ,EAAKA,EAAQ,GAAK,GAAKA,EAAS,EAC9DX,GAASD,IAKb,SAASc,EAAWF,GACbJ,EAAUK,UACbH,EAAcG,QAAUD,EAAQ,EAAKA,EAAQ,GAAK,GAAKA,EAAS,EAChEb,EAAoC,GAAxBW,EAAcG,SAC1BZ,GAASD,IAIb,OArEAe,qBAAU,WACJP,EAAUK,UACRf,GAAY,IACdH,EAAUqB,YAAW,kBAAMjB,EAAYD,EAAW,KAAI,MAGvC,IAAbA,GAAkBM,IACpBa,SAASC,eAAe,QAAQC,OAChCb,EAAYO,SAAWP,EAAYO,QACnCV,EAAcG,EAAYO,QAAU,gBAAkB,eACtDO,aAAazB,GACbU,GAAQ,IAGNP,EAAW,IAAMM,IACnBL,EACEO,EAAYO,QACgB,GAAxBH,EAAcG,QACQ,GAAtBJ,EAAYI,SAElBR,GAAQ,OAGX,CAACP,EAAUU,EAAUK,QAASP,EAAYO,UA+C3C,gCACE,oBAAIpC,UAAU,QAAd,qCACA,sBAAKA,UAAU,mBAAf,UACE,cAACF,EAAD,CACEI,KAAK,cACLM,OAAQwB,EAAYI,QACpBjC,MAAM,eACNI,UAAU,eACVH,GAAG,kBACHK,GAAG,kBACHH,YAAa,kBAAM4B,EAASF,EAAYI,QAAU,IAClD1B,aAAc,kBAAMwB,EAASF,EAAYI,QAAU,MAErD,gCACE,mBAAGpC,UAAU,QAAQC,GAAG,cAAxB,SACGwB,IAEH,uBAAOxB,GAAG,OAAO2C,IAAI,+CAArB,SACG,MAEH,sBAAK5C,UAAU,kBAAf,UACE,mBAAGC,GAAG,YAAYD,UAAU,eAA5B,SACGW,EAAWU,KAEd,wBACEpB,GAAG,aACHD,UAAU,gBACVK,QAAS,WAvEf0B,EAAUK,SACZL,EAAUK,SAAU,EACpBO,aAAazB,GACbM,GAASD,KAETQ,EAAUK,SAAU,EACpBZ,GAASD,KA8DH,SAKE,mBAAGvB,UAAU,wBAEf,wBACEC,GAAG,QACHD,UAAU,gBACVK,QAAS,kBAnEf0B,EAAUK,UACZL,EAAUK,SAAU,EACpBO,aAAazB,IAEfmB,EApDa,IAqDbf,EAAYF,MACZc,EAvDe,GAwDfL,EAAYO,SAAU,EACtBV,EAAc,iBACdE,GAAQ,GACRY,SAASC,eAAe,QAAQI,QAChCL,SAASC,eAAe,QAAQK,YAAc,OAC9CtB,GAASD,IAoDD,SAKE,mBAAGvB,UAAU,2BAInB,cAACF,EAAD,CACEI,KAAK,gBACLM,OAAQyB,EAAcG,QACtBjC,MAAM,iBACNI,UAAU,iBACVH,GAAG,oBACHK,GAAG,oBACHH,YAAa,kBAAM+B,EAAWJ,EAAcG,QAAU,IACtD1B,aAAc,kBAAM2B,EAAWJ,EAAcG,QAAU,YAOjEW,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAChC,EAAD,MAEFuB,SAASC,eAAe,W","file":"static/js/main.7f16e2d4.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.css\";\n\n// reusable component for setting break length and session length via buttons\nfunction SetTime(props) {\n  return (\n    <div>\n      <p className=\"title\" id={props.name}>\n        {props.title}\n      </p>\n      <div className=\"setBackground\">\n        <button id={props.b1} onClick={props.onClickPlus}>\n          +\n        </button>\n        <p id={props.valueName}>{props.length}</p>\n        <button id={props.b2} onClick={props.onClickMinus}>\n          -\n        </button>\n      </div>\n    </div>\n  );\n}\n\n// reusable function to convert raw seconds into MM:SS format\nfunction formatTime(secs) {\n  if (secs < 0) secs = 0;\n  let minutes = Math.floor(secs / 60);\n  let seconds = secs - minutes * 60;\n  seconds = seconds < 10 ? \"0\" + seconds : seconds;\n  minutes = minutes < 10 ? \"0\" + minutes : minutes;\n  return minutes + \":\" + seconds;\n}\n\nfunction Timer(props) {\n  const defBreak = 5,\n    defSession = 25;\n  const [timeLeft, setTimeLeft] = useState(defSession * 60);\n  const [tick, setTick] = useState(false);\n  const [timerLabel, setTimerLabel] = useState(\"Session Timer\");\n  const [flag, setFlag] = useState(true);\n  let workOrBreak = useRef(true);\n  let isRunning = useRef(false);\n  let breakLength = useRef(defBreak);\n  let sessionLength = useRef(defSession);\n  let myTimer;\n\n  useEffect(() => {\n    if (isRunning.current) {\n      if (timeLeft > -1) {\n        myTimer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n      }\n\n      if (timeLeft === 0 && flag) {\n        document.getElementById(\"beep\").play();\n        workOrBreak.current = !workOrBreak.current;\n        setTimerLabel(workOrBreak.current ? \"Session Timer\" : \"Break Timer\");\n        clearTimeout(myTimer);\n        setFlag(false);\n      }\n\n      if (timeLeft < 0 && !flag) {\n        setTimeLeft(\n          workOrBreak.current\n            ? sessionLength.current * 60\n            : breakLength.current * 60\n        );\n        setFlag(true);\n      }\n    }\n  }, [timeLeft, isRunning.current, workOrBreak.current]);\n\n  function handleStartStop() {\n    if (isRunning.current) {\n      isRunning.current = false;\n      clearTimeout(myTimer);\n      setTick(!tick);\n    } else {\n      isRunning.current = true;\n      setTick(!tick);\n    }\n  }\n\n  function handleReset() {\n    if (isRunning.current) {\n      isRunning.current = false;\n      clearTimeout(myTimer);\n    }\n    setSession(defSession);\n    setTimeLeft(defSession * 60);\n    setBreak(defBreak);\n    workOrBreak.current = true;\n    setTimerLabel(\"Session Timer\");\n    setFlag(true);\n    document.getElementById(\"beep\").pause();\n    document.getElementById(\"beep\").currentTime = 0;\n    setTick(!tick);\n  }\n\n  // set break length between 1-60\n  function setBreak(value) {\n    if (!isRunning.current) {\n      breakLength.current = value > 1 ? (value > 60 ? 60 : value) : 1;\n      setTick(!tick);\n    }\n  }\n\n  // set session length between 1-60\n  function setSession(value) {\n    if (!isRunning.current) {\n      sessionLength.current = value > 1 ? (value > 60 ? 60 : value) : 1;\n      setTimeLeft(sessionLength.current * 60);\n      setTick(!tick);\n    }\n  }\n\n  return (\n    <div>\n      <h1 className=\"input\"> Session / Break Timer </h1>\n      <div className=\"buttonBackground\">\n        <SetTime\n          name=\"break-label\"\n          length={breakLength.current}\n          title=\"Break Length\"\n          valueName=\"break-length\"\n          b1=\"break-increment\"\n          b2=\"break-decrement\"\n          onClickPlus={() => setBreak(breakLength.current + 1)}\n          onClickMinus={() => setBreak(breakLength.current - 1)}\n        />\n        <div>\n          <p className=\"title\" id=\"timer-label\">\n            {timerLabel}\n          </p>\n          <audio id=\"beep\" src=\"https://bigsoundbank.com/UPLOAD/mp3/1628.mp3\">\n            {\" \"}\n          </audio>\n          <div className=\"timerBackground\">\n            <p id=\"time-left\" className=\"timerDisplay\">\n              {formatTime(timeLeft)}\n            </p>\n            <button\n              id=\"start_stop\"\n              className=\"sessionButton\"\n              onClick={() => handleStartStop()}\n            >\n              <i className=\"fa fa-play-circle\"></i>\n            </button>\n            <button\n              id=\"reset\"\n              className=\"sessionButton\"\n              onClick={() => handleReset()}\n            >\n              <i className=\"fa fa-redo-alt\"></i>\n            </button>\n          </div>\n        </div>\n        <SetTime\n          name=\"session-label\"\n          length={sessionLength.current}\n          title=\"Session Length\"\n          valueName=\"session-length\"\n          b1=\"session-increment\"\n          b2=\"session-decrement\"\n          onClickPlus={() => setSession(sessionLength.current + 1)}\n          onClickMinus={() => setSession(sessionLength.current - 1)}\n        />\n      </div>\n    </div>\n  );\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Timer />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}