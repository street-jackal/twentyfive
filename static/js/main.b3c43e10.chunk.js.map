{"version":3,"sources":["index.js"],"names":["SetTime","props","className","id","name","title","b1","onClick","onClickPlus","valueName","length","b2","onClickMinus","formatTime","secs","minutes","Math","floor","seconds","Timer","myTimer","useState","defSession","timeLeft","setTimeLeft","tick","setTick","timerLabel","setTimerLabel","flag","setFlag","workOrBreak","useRef","isRunning","breakLength","sessionLength","setBreak","value","current","setSession","useEffect","setTimeout","document","getElementById","play","clearTimeout","src","pause","currentTime","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b3c43e10.chunk.js","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\n\n\n// reusable component for setting break length and session length via buttons\nfunction SetTime(props) {\n\n  return (\n    <div>\n      <p className=\"title\" id={props.name}>{props.title}</p>\n      <div className=\"setBackground\">\n        <button id={props.b1} onClick={props.onClickPlus}>+</button>\n        <p id={props.valueName}>{props.length}</p>\n        <button id={props.b2} onClick={props.onClickMinus}>-</button>\n      </div>\n    </div>\n  )\n}\n\n// reusable function to convert raw seconds into MM:SS format\nfunction formatTime(secs) {\n  if (secs < 0)\n    secs = 0;\n  let minutes = Math.floor(secs / 60);\n  let seconds = secs - minutes * 60;\n  seconds = seconds < 10 ? '0' + seconds : seconds;\n  minutes = minutes < 10 ? '0' + minutes : minutes;\n  return minutes + ':' + seconds;\n}\n\nfunction Timer(props) {\n\n  const defBreak = 5, defSession = 25;\n  const [timeLeft, setTimeLeft] = useState(defSession * 60);\n  const [tick, setTick] = useState(false);\n  const [timerLabel, setTimerLabel] = useState(\"Session Timer\");\n  const [flag, setFlag] = useState(true);\n  let workOrBreak = useRef(true);\n  let isRunning = useRef(false);\n  let breakLength = useRef(defBreak);\n  let sessionLength = useRef(defSession);\n  let myTimer;\n\n  useEffect(() => {\n    if (isRunning.current) {\n\n      if (timeLeft > -1) {\n        myTimer = setTimeout(() => setTimeLeft(timeLeft - 1), 1000);\n      }\n\n      if (timeLeft === 0 && flag) {\n        document.getElementById(\"beep\").play();\n        workOrBreak.current = !workOrBreak.current;\n        setTimerLabel(workOrBreak.current ? \"Session Timer\" : \"Break Timer\");\n        clearTimeout(myTimer);\n        setFlag(false);\n      }\n\n      if (timeLeft < 0 && !flag) {\n        setTimeLeft(workOrBreak.current ? sessionLength.current * 60 : breakLength.current * 60);\n        setFlag(true);\n      }\n    }\n  }, [timeLeft, isRunning.current, workOrBreak.current]);\n\n  function handleStartStop() {\n    if (isRunning.current) {\n      isRunning.current = false;\n      clearTimeout(myTimer);\n      setTick(!tick);\n    }\n    else {\n      isRunning.current = true;\n      setTick(!tick);\n    }\n  }\n\n  function handleReset() {\n    if (isRunning.current) {\n      isRunning.current = false;\n      clearTimeout(myTimer);\n    }\n    setSession(defSession);\n    setTimeLeft(defSession * 60);\n    setBreak(defBreak);\n    workOrBreak.current = true;\n    setTimerLabel(\"Session Timer\");\n    setFlag(true);\n    document.getElementById(\"beep\").pause();\n    document.getElementById(\"beep\").currentTime = 0;\n    setTick(!tick);\n  }\n\n  // set break length between 1-60\n  function setBreak(value) {\n    if (!isRunning.current) {\n      breakLength.current =\n        value > 1\n          ? value > 60\n            ? 60\n            : value\n          : 1\n      setTick(!tick);\n    }\n  }\n\n  // set session length between 1-60\n  function setSession(value) {\n    if (!isRunning.current) {\n      sessionLength.current =\n        value > 1\n          ? value > 60\n            ? 60\n            : value\n          : 1\n      setTimeLeft(sessionLength.current * 60);\n      setTick(!tick);\n    }\n  }\n\n  return (\n    <div>\n      <h1 className=\"input\"> 25 + 5 Clock </h1>\n      <div className=\"buttonBackground\">\n        <SetTime\n          name=\"break-label\"\n          length={breakLength.current}\n          title=\"Break Length\"\n          valueName=\"break-length\"\n          b1=\"break-increment\"\n          b2=\"break-decrement\"\n          onClickPlus={() => setBreak(breakLength.current + 1)}\n          onClickMinus={() => setBreak(breakLength.current - 1)}\n        />\n        <div>\n          <p className=\"title\" id=\"timer-label\">{timerLabel}</p>\n          <audio id=\"beep\" src=\"https://bigsoundbank.com/UPLOAD/mp3/1628.mp3\"> </audio>\n          <div className=\"timerBackground\">\n            <p id=\"time-left\" className=\"timerDisplay\">{formatTime(timeLeft)}</p>\n            <button id=\"start_stop\" className=\"sessionButton\" onClick={() => handleStartStop()}>\n              <i className=\"fa fa-play-circle\"></i>\n            </button>\n            <button id=\"reset\" className=\"sessionButton\" onClick={() => handleReset()}>\n              <i className=\"fa fa-redo-alt\"></i>\n            </button>\n          </div>\n        </div>\n        <SetTime\n          name=\"session-label\"\n          length={sessionLength.current}\n          title=\"Session Length\"\n          valueName=\"session-length\"\n          b1=\"session-increment\"\n          b2=\"session-decrement\"\n          onClickPlus={() => setSession(sessionLength.current + 1)}\n          onClickMinus={() => setSession(sessionLength.current - 1)}\n        />\n      </div>\n    </div>\n  )\n}\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Timer />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}